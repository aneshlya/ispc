# Copyright (c) 2023-2024, Intel Corporation
# SPDX-License-Identifier: BSD-3-Clause

name: (INTERNAL) ISPC release build

on:
  workflow_dispatch:
    inputs:
      core_repo:
        description: 'Core Repository (default: ispc/ispc)'
        required: true
        type: string
        default: 'ispc/ispc'
      core_ref:
        description: 'Core Repository Ref/SHA (default: main)'
        required: true
        type: string
        default: 'main'
      notarize_macos:
        description: 'Notarize macOS binaries'
        required: true
        type: boolean
        default: false
      lto:
        description: 'Turn on LTO'
        required: true
        type: choice
        options:
          - 'ON'
          - 'OFF'
        default: 'OFF'

env:
  ARTIFACTORY_ISPC_URL: ${{ secrets.ARTIFACTORY_ISPC_URL }}/superbuild
  ARTIFACTORY_ISPC_API_KEY: ${{ secrets.ARTIFACTORY_ISPC_API_KEY }}
  PRESET_TYPE: "os"
  PIPELINE_ID: ${{ github.run_id }}
  LLVM_NO_ASSERTIONS: 1
  REBUILD_LLVM: 1
  SIGNING_REQUIRED: 1
  MACOS_ANDROID_NDK: "/Users/Shared/android-ndk-r20b"
  MACOS_PATH: "/opt/homebrew/bin:/opt/homebrew/opt/bison/bin:/opt/homebrew/opt/flex/bin"

jobs:
    define-package-params:
      runs-on: 'Linux'
      container: amr-registry.caas.intel.com/ispc/ubuntu:22.04
      outputs:
        package_name: ${{ steps.define-package.outputs.package_name }}
        package_macos_name_uni: ${{ steps.define-package.outputs.package_macos_name_uni }}
        package_macos_name_arm64: ${{ steps.define-package.outputs.package_macos_name_arm64 }}
        package_macos_name_x86_64: ${{ steps.define-package.outputs.package_macos_name_x86_64 }}
        package_linux_name: ${{ steps.define-package.outputs.package_linux_name }}
        package_linux_name_oneapi: ${{ steps.define-package.outputs.package_linux_name_oneapi }}
        package_examples_linux_name: ${{ steps.define-package.outputs.package_examples_linux_name }}
        package_win_name: ${{ steps.define-package.outputs.package_win_name }}
        package_examples_win_name: ${{ steps.define-package.outputs.package_examples_win_name }}
        docker_path: ${{ steps.define-package.outputs.docker_path }}
      steps:
        - name: Checkout ISPC repo
          uses: actions/checkout@v4
          with:
            repository: ${{ inputs.core_repo }}
            ref: ${{ inputs.core_ref }}
            submodules: false
            fetch-depth: 0
            path: ispc
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: Define ISPC package parameters
          id: define-package
          run: |
            PACKAGE_NAME="ispc-trunk"
            PACKAGE_EXAMPLES_NAME="ispc-examples-trunk"
            DOCKER_PATH="ispc/docker/centos/7/xpu_ispc_build"
            if [[ ${{ inputs.core_ref}} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              PACKAGE_NAME="ispc-${{ inputs.core_ref}}"
              PACKAGE_EXAMPLES_NAME="ispc-examples-${{ inputs.core_ref }}"
              DOCKER_PATH="ispc/docker/${{ inputs.core_ref}}/centos7"
            fi
            echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
            echo "package_name=${PACKAGE_NAME}" >> $GITHUB_STEP_SUMMARY
            echo "package_macos_name_uni=${PACKAGE_NAME}-macOS.universal.tar.gz" >> $GITHUB_OUTPUT
            echo "package_macos_name_uni=${PACKAGE_NAME}-macOS.universal.tar.gz" >> $GITHUB_STEP_SUMMARY
            echo "package_macos_name_x86_64=${PACKAGE_NAME}-macOS.x86_64.tar.gz" >> $GITHUB_OUTPUT
            echo "package_macos_name_x86_64=${PACKAGE_NAME}-macOS.x86_64.tar.gz" >> $GITHUB_STEP_SUMMARY
            echo "package_macos_name_arm64=${PACKAGE_NAME}-macOS.arm64.tar.gz" >> $GITHUB_OUTPUT
            echo "package_macos_name_arm64=${PACKAGE_NAME}-macOS.arm64.tar.gz" >> $GITHUB_STEP_SUMMARY
            echo "package_linux_name=${PACKAGE_NAME}-linux.tar.gz" >> $GITHUB_OUTPUT
            echo "package_linux_name=${PACKAGE_NAME}-linux.tar.gz" >> $GITHUB_STEP_SUMMARY
            echo "package_linux_name_oneapi=${PACKAGE_NAME}-linux-oneapi.tar.gz" >> $GITHUB_OUTPUT
            echo "package_linux_name_oneapi=${PACKAGE_NAME}-linux-oneapi.tar.gz" >> $GITHUB_STEP_SUMMARY
            echo "package_examples_linux_name=${PACKAGE_EXAMPLES_NAME}.tar.gz" >> $GITHUB_OUTPUT
            echo "package_examples_linux_name=${PACKAGE_EXAMPLES_NAME}.tar.gz" >> $GITHUB_STEP_SUMMARY
            echo "package_win_name=${PACKAGE_NAME}-windows.zip" >> $GITHUB_OUTPUT
            echo "package_win_name=${PACKAGE_NAME}-windows.zip" >> $GITHUB_STEP_SUMMARY
            echo "package_examples_win_name=${PACKAGE_EXAMPLES_NAME}.zip" >> $GITHUB_OUTPUT
            echo "package_examples_win_name=${PACKAGE_EXAMPLES_NAME}.zip" >> $GITHUB_STEP_SUMMARY
            echo "docker_path=${DOCKER_PATH}" >> $GITHUB_OUTPUT
            echo "docker_path=${DOCKER_PATH}" >> $GITHUB_STEP_SUMMARY
            echo "signing=${{ env.SIGNING_REQUIRED}}" >> $GITHUB_OUTPUT
            echo "signing=${{ env.SIGNING_REQUIRED}}" >> $GITHUB_STEP_SUMMARY
            echo "core_repo=${{ inputs.core_repo }}" >> $GITHUB_OUTPUT
            echo "core_repo=${{ inputs.core_repo }}" >> $GITHUB_STEP_SUMMARY
            echo "core_ref=${{ inputs.core_ref }}" >> $GITHUB_OUTPUT
            echo "core_ref=${{ inputs.core_ref }}" >> $GITHUB_STEP_SUMMARY
            echo "notarize_macOS=${{ inputs.notarize_macos }}" >> $GITHUB_OUTPUT
            echo "notarize_macOS=${{ inputs.notarize_macos }}" >> $GITHUB_STEP_SUMMARY
            echo "LTO=${{ inputs.lto }}" >> $GITHUB_OUTPUT
            echo "LTO=${{ inputs.lto }}" >> $GITHUB_STEP_SUMMARY
          shell: bash

    define-presets:
      uses: ./.github/workflows/ispc-ci-internal-preset.yml
      with:
        core_repo: ${{ inputs.core_repo }}
        core_ref: ${{ inputs.core_ref }}
        preset_type: "os"
      secrets: inherit

    linux-package:
      runs-on: ['Linux', 'docker', 'build']
      container: amr-registry.caas.intel.com/ispc/ubuntu:22.04
      needs: [define-package-params]
      steps:
        - uses: actions/checkout@v4
          with:
            repository: ${{ inputs.core_repo }}
            ref: ${{ inputs.core_ref }}
            submodules: false
            fetch-depth: 0
            path: ispc
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: Build CentOS 7 docker image
          run: |
            cd ${{ needs.define-package-params.outputs.docker_path }}
            docker build --no-cache \
                --build-arg https_proxy=$https_proxy \
                --build-arg http_proxy=$http_proxy \
                --build-arg REPO=${{ inputs.core_repo }} \
                --build-arg SHA=${{ inputs.core_ref }} \
                --build-arg LTO=${{ inputs.lto }} \
                -t centos_7_ispc_xpu \
                -f Dockerfile .
          shell: bash

        - name: Copy ISPC release package from docker
          run: |
            container_id=$(docker create centos_7_ispc_xpu)
            docker cp $container_id:/usr/local/src/ispc/${{ needs.define-package-params.outputs.package_linux_name }} .
            docker rm -v $container_id
            docker rmi centos_7_ispc_xpu
          shell: bash

        - name: Upload package
          uses: actions/upload-artifact@v4
          with:
            name: ispc_linux_package
            path: ${{ needs.define-package-params.outputs.package_linux_name }}

        - name: Clean up
          run: |
            rm -rf *.tar.gz
          shell: bash

    # Build and run ISPC examples
    linux-examples:
      runs-on: ['Linux', 'docker', 'dg2', 'hw', 'perf']
      needs: [define-package-params, linux-package, macos-package]
      timeout-minutes: 10
      container:
        # TODO: use llvm version in docker name from presets
        image: amr-registry.caas.intel.com/ispc/gen-os-15.0:latest
        options: --device=/dev/dri:/dev/dri --cap-add=SYS_PTRACE
      steps:
        - name: Clean up
          run: |
            rm -rf artifacts ispc-*-linux
          shell: bash

        - name: Download build artifacts
          uses: actions/download-artifact@v4
          with:
            name: ispc_linux_package
            path: artifacts

        - name: Download examples package
          uses: actions/download-artifact@v4
          with:
            name: examples-tgz
            path: artifacts

        - name: Unpack artifacts
          run: |
            tar -xvf ${{ needs.define-package-params.outputs.package_linux_name }}
            tar -xvf ${{ needs.define-package-params.outputs.package_examples_linux_name }}
          working-directory: artifacts

        - name: Build CPU examples
          run: |
            rm -rf build
            export PATH=$GITHUB_WORKSPACE/artifacts/${{ needs.define-package-params.outputs.package_name }}-linux/bin:$PATH
            cmake -B build $GITHUB_WORKSPACE/artifacts/examples/cpu
            cmake --build build -j`nproc`
          shell: bash

        - name: Build and run XPU examples
          run: |
            rm -rf build
            export PATH=$GITHUB_WORKSPACE/artifacts/${{ needs.define-package-params.outputs.package_name }}-linux/bin:$PATH
            ISPCRT_CMAKE_DIR=$(realpath $(dirname $(find . -name ispcrtConfig.cmake)))
            export CMAKE_PREFIX_PATH=$ISPCRT_CMAKE_DIR
            cmake -B build $GITHUB_WORKSPACE/artifacts/examples/xpu
            cmake --build build -j`nproc`
            cd build && ctest -C Release -V --timeout 30
          shell: bash

        - name: Clean up
          run: |
            rm -rf artifacts ispc-*-linux
          shell: bash

    # Test rksuperbuild
    linux-rksuperbuild:
      runs-on: ['docker', 'avx512']
      timeout-minutes: 20
      needs: [define-package-params, linux-package]
      container:
        image: amr-registry.caas.intel.com/renderkit/ubuntu:22.04
        options: --user root
      env:
        ispc_version: '1.22.0'
      steps:
        - uses: actions/checkout@v4
          with:
            repository: 'intel-innersource/libraries.graphics.renderkit.superbuild'
            ref: 'v1.8.2'
            token: ${{ secrets.access_token }}
        - name: Clean up
          run: |
            rm -rf artifacts
          shell: bash

        - name: Download build artifacts
          uses: actions/download-artifact@v4
          with:
            name: ispc_linux_package
            path: artifacts
        - name: Unpack artifacts
          run: |
            tar -xvf ispc*.tar.gz
          working-directory: artifacts
        - name: RK superbuild
          run: |
            export PATH=$GITHUB_WORKSPACE/artifacts/${{ needs.define-package-params.outputs.package_name }}-linux/bin:$PATH
            mkdir build && cd build
            # Remove "v" from ISPC tag
            ispc_version=${{ env.ispc_version }}
            if [[ ${{ inputs.core_ref}} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              ispc_version=$(echo "${{ inputs.core_ref}}" | sed 's/v//g')
            fi
            echo $ispc_version
            cmake -DISPC_URL=$GITHUB_WORKSPACE/artifacts/${{ needs.define-package-params.outputs.package_linux_name }} -DISPC_VERSION=$ispc_version ..
            cmake --build .
          shell: bash

        - name: Clean up
          run: |
            rm -rf artifacts
          shell: bash

    # Run GameDev ISPC tests
    linux-ispctests:
      runs-on: ['docker', 'avx512']
      timeout-minutes: 20
      needs: [define-package-params, linux-package]
      container: amr-registry.caas.intel.com/ispc/ubuntu:22.04
      steps:
        - uses: actions/checkout@v4
          with:
            repository: 'intel-innersource/applications.compilers.ispc.core'
            ref: 'gen'
            token: ${{ secrets.access_token }}
        - name: Clean up
          run: |
            rm -rf artifacts
          shell: bash

        - name: Download build artifacts
          uses: actions/download-artifact@v4
          with:
            name: ispc_linux_package
            path: artifacts
        - name: Unpack artifacts
          run: |
            tar -xvf ispc*.tar.gz
          working-directory: artifacts
        - name: Run GameDev ISPC tests
          env:
            ACCESS_TOKEN: ${{ secrets.access_token }}
          run: |
            export PATH=$GITHUB_WORKSPACE/artifacts/${{ needs.define-package-params.outputs.package_name }}-linux/bin:$PATH
            .github/workflows/scripts/internal/run-ispctests.sh
          shell: bash

        - name: Clean up
          run: |
            rm -rf artifacts
          shell: bash

    linux-package-oneapi:
      runs-on: ['Linux', 'docker', 'build']
      container: amr-registry.caas.intel.com/ispc/ubuntu:22.04
      needs: [define-package-params]
      steps:
        - uses: actions/checkout@v4
          with:
            repository: ${{ inputs.core_repo }}
            ref: ${{ inputs.core_ref }}
            submodules: false
            fetch-depth: 0
            path: ispc
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: Build CentOS 7 docker image
          run: |
            cd ${{ needs.define-package-params.outputs.docker_path }}
            docker build --no-cache \
                --build-arg https_proxy=$https_proxy \
                --build-arg http_proxy=$http_proxy \
                --build-arg REPO=${{ inputs.core_repo }} \
                --build-arg SHA=${{ inputs.core_ref }} \
                --build-arg TBB=oneapi \
                --build-arg LTO=${{ inputs.lto }} \
                -t centos_7_ispc_xpu_oneapi \
                -f Dockerfile .
          shell: bash

        - name: Copy ISPC release package from docker
          run: |
            container_id=$(docker create centos_7_ispc_xpu_oneapi)
            docker cp $container_id:/usr/local/src/ispc/${{ needs.define-package-params.outputs.package_linux_name }} ${{ needs.define-package-params.outputs.package_linux_name_oneapi }}
            docker rm -v $container_id
            docker rmi centos_7_ispc_xpu_oneapi
          shell: bash

        - name: Upload package
          uses: actions/upload-artifact@v4
          with:
            name: ispc_linux_package_oneapi
            path: ${{ needs.define-package-params.outputs.package_linux_name_oneapi }}

        - name: Clean up
          run: |
            rm -rf *.tar.gz
          shell: bash

    linux-check:
      runs-on: ['Linux', 'docker', 'build']
      container: amr-registry.caas.intel.com/ispc/ubuntu:22.04
      needs: [define-package-params, linux-package]
      steps:
        # We need to fetch internal repo for release-check scripts
        - uses: actions/checkout@v4
          with:
            submodules: false
            fetch-depth: 0
            path: ispc
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: Clean up
          run: |
            rm -rf artifacts
          shell: bash

        - name: Download package
          uses: actions/download-artifact@v4
          with:
            name: ispc_linux_package
            path: artifacts

        - name: Run release check for package
          run: |
            ./ispc/.github/workflows/scripts/internal/release-check-linux.sh ${{ needs.define-package-params.outputs.package_linux_name }} artifacts
          shell: bash

        - name: Clean up
          run: |
            rm -rf artifacts
          shell: bash

    linux-oneapi-check:
      runs-on: ['Linux', 'docker', 'build']
      container: amr-registry.caas.intel.com/ispc/ubuntu:22.04
      needs: [define-package-params, linux-package-oneapi]
      steps:
        # We need to fetch internal repo for release-check scripts
        - uses: actions/checkout@v4
          with:
            submodules: false
            fetch-depth: 0
            path: ispc
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: Clean up
          run: |
            rm -rf artifacts
          shell: bash

        - name: Download package
          uses: actions/download-artifact@v4
          with:
            name: ispc_linux_package_oneapi
            path: artifacts

        - name: Run release check for package
          run: |
            ./ispc/.github/workflows/scripts/internal/release-check-linux.sh ${{ needs.define-package-params.outputs.package_linux_name_oneapi }} artifacts
          shell: bash

        - name: Clean up
          run: |
            rm -rf artifacts
          shell: bash

    macos-package:
      runs-on: ['macOS', 'ARM64', 'build']
      needs: [define-package-params, define-presets]
      env:
        LLVM_VER: ${{ needs.define-presets.outputs.LLVM_VER }}
        IDENTITYMGR: '/Applications/Identity Manager.app/Contents/MacOS/identitymgr'
        NOTARYTOOL_API_KEY: ${{ secrets.NOTARYTOOL_API_KEY }}
        NOTARYTOOL_API_KEY_ISSUER_UUID: ${{ secrets.NOTARYTOOL_API_KEY_ISSUER_UUID }}
        NOTARYTOOL_API_KEY_ID: ${{ secrets.NOTARYTOOL_API_KEY_ID }}
      steps:
        - name: Checkout ISPC repo
          uses: actions/checkout@v4
          with:
            repository: ${{ inputs.core_repo }}
            ref: ${{ inputs.core_ref }}
            path: ispc
            token: ${{ secrets.ACCESS_TOKEN }}

        # We need to fetch internal repo to use notarize.sh script
        - name: Checkout internal ISPC repo
          uses: actions/checkout@v4
          with:
            submodules: false
            fetch-depth: 0
            path: ispc-internal
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: Build LLVM
          run: |
            rm -rf build
            cmake -B build "${{ github.workspace }}/ispc/superbuild" --preset os  -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install" -DBUILD_STAGE2_TOOLCHAIN_ONLY=ON -DLTO=${{ inputs.lto }} -D__INTEL_EMBARGO__=OFF -DXE_DEPS=OFF -DMACOS_UNIVERSAL_BIN=ON -DLLVM_DISABLE_ASSERTIONS=OFF -DISPC_ANDROID_NDK_PATH=/Users/Shared/android-ndk-r20b
            cmake --build build
            cmake --build build --target package-stage2
            mv build/llvm-stage2-*.tgz ./
            rm -rf build
          shell: bash

        - name: Enable signing
          run: |
            echo "Enable signing:"
            security unlock-keychain -p '${{ secrets.MACOS_USER_PASSWD }}'
            "$IDENTITYMGR" -s -t https://iamws-i.intel.com/api/v1/token -i https://edss-api.intel.com -u sys_ispc -a '${{ secrets.MACOS_IDENTITYMGR_PASSWD }}'
            "$IDENTITYMGR" -r
            "$IDENTITYMGR" -p -v
          shell: bash

        - name: Build macOS universal package and sign it
          run: |
            rm -rf build-uni
            cmake -B build-uni "${{ github.workspace }}/ispc/superbuild" --preset os -DPREBUILT_STAGE2_PATH="${{ github.workspace }}/install" -DLTO=${{ inputs.lto }} -D__INTEL_EMBARGO__=OFF -DXE_DEPS=OFF -DMACOS_UNIVERSAL_BIN=ON -DISPC_ANDROID_NDK_PATH=$MACOS_ANDROID_NDK -DISPC_SIGN_KEY=${{ secrets.MACOS_SIGN_KEY }}
            cmake --build build-uni
            cmake --build build-uni --target ispc-stage2-check-all
            mv build-uni/build-ispc-stage2/src/ispc-stage2-build/${{ needs.define-package-params.outputs.package_macos_name_uni }} ./
            rm -rf build-uni
          shell: bash

        - name: Notarize macOS universal binaries
          if: ${{ inputs.notarize_macos }}
          run: |
            ISPC_DIR=`pwd`/ispc-internal
            rm -rf notarize && mkdir notarize && pushd notarize
            tar xf ../${{ needs.define-package-params.outputs.package_macos_name_uni }}
            cd ispc-*-macOS*
            zip ispc-uni.zip bin/ispc $(find -P ./lib -type f -name "lib*dylib")
            "$ISPC_DIR"/.github/workflows/scripts/internal/notarize.sh ispc-uni.zip
            mv ispc-uni.zip ../
            popd && rm -rf notarize
          shell: bash

        - name: Build macOS arm64 package and sign it
          run: |
            rm -rf build-arm64
            cmake -B build-arm64 "${{ github.workspace }}/ispc/superbuild" --preset os  -DPREBUILT_STAGE2_PATH="${{ github.workspace }}/install" -DLTO=${{ inputs.lto }} -D__INTEL_EMBARGO__=OFF -DXE_DEPS=OFF -DMACOS_UNIVERSAL_BIN=OFF -DCMAKE_OSX_ARCHITECTURES=arm64 -DISPC_ANDROID_NDK_PATH=$MACOS_ANDROID_NDK -DISPC_SIGN_KEY=${{ secrets.MACOS_SIGN_KEY }}
            cmake --build build-arm64
            cmake --build build-arm64 --target ispc-stage2-check-all
            mv build-arm64/build-ispc-stage2/src/ispc-stage2-build/${{ needs.define-package-params.outputs.package_macos_name_arm64 }} ./
            rm -rf build-arm64
          shell: bash

        - name: Notarize macOS arm64 binaries
          if: ${{ inputs.notarize_macos }}
          run: |
            ISPC_DIR=`pwd`/ispc-internal
            rm -rf notarize && mkdir notarize && pushd notarize
            tar xf ../${{ needs.define-package-params.outputs.package_macos_name_arm64 }}
            cd ispc-*-macOS*
            zip ispc-arm64.zip bin/ispc $(find -P ./lib -type f -name "lib*dylib")
            "$ISPC_DIR"/.github/workflows/scripts/internal/notarize.sh ispc-arm64.zip
            mv ispc-arm64.zip ../
            popd && rm -rf notarize
          shell: bash

        - name: Build macOS x86_64 package and sign it
          run: |
            rm -rf build-x86_64
            cmake -B build-x86_64 "${{ github.workspace }}/ispc/superbuild" --preset os  -DPREBUILT_STAGE2_PATH="${{ github.workspace }}/install" -DLTO=${{ inputs.lto }} -D__INTEL_EMBARGO__=OFF -DXE_DEPS=OFF -DMACOS_UNIVERSAL_BIN=OFF -DCMAKE_OSX_ARCHITECTURES=x86_64 -DISPC_ANDROID_NDK_PATH=$MACOS_ANDROID_NDK -DISPC_SIGN_KEY=${{ secrets.MACOS_SIGN_KEY }}
            cmake --build build-x86_64
            cmake --build build-x86_64 --target ispc-stage2-check-all
            mv build-x86_64/build-ispc-stage2/src/ispc-stage2-build/${{ needs.define-package-params.outputs.package_macos_name_x86_64 }} ./
            mv build-x86_64/build-ispc-stage2/src/ispc-stage2-build/${{ needs.define-package-params.outputs.package_examples_linux_name }} ./
            rm -rf build-x86_64
          shell: bash

        - name: Notarize macOS x86_64 binaries
          if: ${{ inputs.notarize_macos }}
          run: |
            ISPC_DIR=`pwd`/ispc-internal
            rm -rf notarize && mkdir notarize && pushd notarize
            tar xf ../${{ needs.define-package-params.outputs.package_macos_name_x86_64 }}
            cd ispc-*-macOS*
            zip ispc-x86_64.zip bin/ispc $(find -P ./lib -type f -name "lib*dylib")
            "$ISPC_DIR"/.github/workflows/scripts/internal/notarize.sh ispc-x86_64.zip
            mv ispc-x86_64.zip ../
            popd && rm -rf notarize
          shell: bash

        - name: Upload macOS universal package
          uses: actions/upload-artifact@v4
          with:
            name: ispc_macos_package_uni
            path: ${{ needs.define-package-params.outputs.package_macos_name_uni }}

        - name: Upload universal notarize archive
          uses: actions/upload-artifact@v4
          with:
            name: ispc_macos_notarize_archive_uni
            path: ispc-uni.zip

        - name: Upload macOS arm64 package
          uses: actions/upload-artifact@v4
          with:
            name: ispc_macos_package_arm64
            path: ${{ needs.define-package-params.outputs.package_macos_name_arm64 }}

        - name: Upload arm64 notarize archive
          uses: actions/upload-artifact@v4
          with:
            name: ispc_macos_notarize_archive_arm64
            path: ispc-arm64.zip

        - name: Upload macOS x86_64 package
          uses: actions/upload-artifact@v4
          with:
            name: ispc_macos_package_x86_64
            path: ${{ needs.define-package-params.outputs.package_macos_name_x86_64 }}

        - name: Upload x86_64 notarize archive
          uses: actions/upload-artifact@v4
          with:
            name: ispc_macos_notarize_archive_x86_64
            path: ispc-x86_64.zip

        - name: Upload LLVM stage2 toolchain
          uses: actions/upload-artifact@v4
          with:
            name: llvm-stage2-mac
            path: llvm-stage2-*.tgz

        - name: Upload examples archive
          uses: actions/upload-artifact@v4
          with:
            name: examples-tgz
            path: ${{ needs.define-package-params.outputs.package_examples_linux_name }}

    macos-check-uni:
      runs-on: ['macOS', 'ARM64', 'build']
      needs: [define-package-params, macos-package]
      steps:
        # We need to fetch internal repo for release-check scripts
        - uses: actions/checkout@v4
          with:
            submodules: false
            fetch-depth: 0
            path: ispc
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: Clean up
          run: |
            rm -rf artifacts
          shell: bash

        - name: Download package
          uses: actions/download-artifact@v4
          with:
            name: ispc_macos_package_uni
            path: artifacts

        - name: Run release check for package
          run: |
            ./ispc/.github/workflows/scripts/internal/release-check-macos.sh ${{ needs.define-package-params.outputs.package_macos_name_uni }} artifacts x86_64 arm64
          shell: bash

        - name: Clean up
          run: |
            rm -rf artifacts
          shell: bash

    macos-check-arm64:
      runs-on: ['macOS', 'ARM64', 'build']
      needs: [define-package-params, macos-package]
      steps:
        # We need to fetch internal repo for release-check scripts
        - uses: actions/checkout@v4
          with:
            submodules: false
            fetch-depth: 0
            path: ispc
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: Clean up
          run: |
            rm -rf artifacts
          shell: bash

        - name: Download package
          uses: actions/download-artifact@v4
          with:
            name: ispc_macos_package_arm64
            path: artifacts

        - name: Run release check for package
          run: |
            ./ispc/.github/workflows/scripts/internal/release-check-macos.sh ${{ needs.define-package-params.outputs.package_macos_name_arm64 }} artifacts arm64
          shell: bash

        - name: Clean up
          run: |
            rm -rf artifacts
          shell: bash

    macos-check-x86_64:
      runs-on: ['macOS', 'ARM64', 'build']
      needs: [define-package-params, macos-package]
      steps:
        # We need to fetch internal repo for release-check scripts
        - uses: actions/checkout@v4
          with:
            submodules: false
            fetch-depth: 0
            path: ispc
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: Clean up
          run: |
            rm -rf artifacts
          shell: bash

        - name: Download package
          uses: actions/download-artifact@v4
          with:
            name: ispc_macos_package_x86_64
            path: artifacts

        - name: Run release check for package
          run: |
            ./ispc/.github/workflows/scripts/internal/release-check-macos.sh ${{ needs.define-package-params.outputs.package_macos_name_x86_64 }} artifacts x86_64
          shell: bash

        - name: Clean up
          run: |
            rm -rf artifacts
          shell: bash

    # Build ISPC package and sign binaries
    win-package:
      runs-on: ['Windows', 'sign']
      needs: [define-package-params, define-presets]
      steps:
        - uses: actions/checkout@v4
          with:
            repository: ${{ inputs.core_repo }}
            ref: ${{ inputs.core_ref }}
            token: ${{ secrets.access_token }}
            submodules: true
        - uses: actions/checkout@v4
          with:
            repository: intel-innersource/applications.compilers.ispc.core
            ref: ${{ github.ref }}
            token: ${{ secrets.access_token }}
            submodules: false
            path: core
        - name: Build and sign ISPC on Windows
          env:
            SIGNING_HASH: ${{ secrets.SIGNING_HASH }}
            ARTIFACTORY_ISPC_URL: ${{ secrets.artifactory_ispc_url }}/superbuild
            ARTIFACTORY_ISPC_API_KEY: ${{ secrets.artifactory_ispc_api_key }}
            SCRIPTS_DIR: ${{ github.workspace }}\core\.github\workflows\scripts\internal
          shell: cmd
          run: |
            set VSVARS="C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Auxiliary\Build\vcvars64.bat"
            call %VSVARS%
            cd d:\temp
            rm -rf build
            cmake %GITHUB_WORKSPACE%/superbuild -B build --preset os -G "NMake Makefiles" -DLTO=${{ inputs.lto }} -D__INTEL_EMBARGO__=OFF -DISPC_SIGN_KEY=%SIGNING_HASH%
            cmake --build build
            cmake --build build --target package-stage2

        - name: Upload ispc artifacts
          uses: actions/upload-artifact@v4
          with:
            name: win-ispc-release
            path: |
              d:\temp\build\build-ispc-stage2\src\ispc-stage2-build\${{ needs.define-package-params.outputs.package_win_name }}

        - name: Upload LLVM stage2 toolchain
          uses: actions/upload-artifact@v4
          with:
            name: llvm-stage2-win
            path: |
              d:\temp\build\llvm-stage2-*.tgz

        - name: Upload examples artifacts
          uses: actions/upload-artifact@v4
          with:
            name: examples-zip
            path: |
              d:\temp\build\build-ispc-stage2\src\ispc-stage2-build\${{ needs.define-package-params.outputs.package_examples_win_name }}

    win-check:
      runs-on: ['Windows', 'sign']
      needs: [define-package-params, win-package]
      steps:
        # We need to fetch internal repo for release-check scripts
        - uses: actions/checkout@v4
          with:
            submodules: false
            fetch-depth: 0
            path: ispc
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: Clean up
          run: |
            rm -rf artifacts
          shell: bash

        - name: Download package
          uses: actions/download-artifact@v4
          with:
            name: win-ispc-release
            path: artifacts

        - name: Run release check for package
          # Dummy arg is needed to swallow the line ending. Cygwin is expected
          # Linux style whereas this script has windows style endings.
          run: |
            ./ispc/.github/workflows/scripts/internal/release-check-windows.sh ${{ needs.define-package-params.outputs.package_win_name }} artifacts dummy_arg
          shell: bash

        - name: Clean up
          run: |
            rm -rf artifacts
          shell: bash

    # Build ISPC examples
    win-examples:
      runs-on: ['Windows', 'sign']
      needs: [define-package-params, win-package]
      steps:

        - name: Clean up
          run: |
            rm -rf artifacts ispc-*-windows
          shell: bash

        - name: Download ISPC package
          uses: actions/download-artifact@v4
          with:
            name: win-ispc-release
            path: artifacts

        - name: Download examples package
          uses: actions/download-artifact@v4
          with:
            name: examples-zip
            path: artifacts

        - name: Unpack artifacts
          run: |
            unzip ${{ needs.define-package-params.outputs.package_win_name }}
            unzip ${{ needs.define-package-params.outputs.package_examples_win_name }}
          working-directory: artifacts
          shell: cmd

        - name: Build CPU examples
          run: |
            call "%VSINSTALLPATH%\VC\Auxiliary\Build\vcvars64.bat"
            if exist build rmdir /q /s build
            cmake %GITHUB_WORKSPACE%\artifacts\examples\cpu -B build -Thost=x64 -G "Visual Studio 16" -DISPC_EXECUTABLE=%GITHUB_WORKSPACE%\artifacts\${{ needs.define-package-params.outputs.package_name }}-windows\bin\ispc.exe
            cmake --build build --target ALL_BUILD --config Release
          shell: cmd

        - name: Clean up
          run: |
            rm -rf artifacts ispc-*-windows
          shell: bash

    # Sign all Github artifacts with GPG key
    sign-artifacts:
      runs-on: ['Linux', 'docker', 'build']
      container: amr-registry.caas.intel.com/edss-public-containers/edss_p11:focal-v1.9
      needs: [define-package-params,  win-package, macos-package, linux-package, linux-package-oneapi]
      steps:
        - name: Clean up
          run: |
            rm -rf *.zip *.gz *.sig
          shell: bash

        - name: Download Windows package
          uses: actions/download-artifact@v4
          with:
            name: win-ispc-release

        - name: Download Windows examples package
          uses: actions/download-artifact@v4
          with:
            name: examples-zip

        - name: Download Linux build artifacts
          uses: actions/download-artifact@v4
          with:
            name: ispc_linux_package

        - name: Download Linux OneAPI build artifacts
          uses: actions/download-artifact@v4
          with:
            name: ispc_linux_package_oneapi

        - name: Download Linux examples package
          uses: actions/download-artifact@v4
          with:
            name: examples-tgz

        - name: Download macOS uni package
          uses: actions/download-artifact@v4
          with:
            name: ispc_macos_package_uni

        - name: Download macOS arm64 package
          uses: actions/download-artifact@v4
          with:
            name: ispc_macos_package_arm64

        - name: Download macOS x86-64 package
          uses: actions/download-artifact@v4
          with:
            name: ispc_macos_package_x86_64

        - name: Prepare GPG tool to sign
          shell: bash
          run: |
            # This is important for gpg, gnupg-pkcs11-scd, /usr/lib/libedssp11.so to work correctly.
            # All of them rely on configuration files located in HOME directory.
            # By some reason under GITHUB CI, default HOME dir is /github, so set it to /root.
            export HOME=/root
            # Authorize in kerberos
            # MACOS_IDENTITYMGR_PASSWD is actually password of sys_ispc account
            echo '${{ secrets.MACOS_IDENTITYMGR_PASSWD }}' | kinit sys_ispc@AMR.CORP.INTEL.COM
            gpg --card-status
            echo '${{ secrets.ISPC_GITHUB_ARTIFACTS_PEM }}' &> ISPC_GITHUB_ARTIFACTS.pem
            gpg --batch --yes --import ISPC_GITHUB_ARTIFACTS.pem
            gpg --list-secret-keys --keyid-format=long

        - name: Sign artifacts
          shell: bash
          run: |
            export HOME=/root
            # Sign Windows packages
            gpg --detach-sign ${{ needs.define-package-params.outputs.package_win_name }}
            gpg --verify ${{ needs.define-package-params.outputs.package_win_name }}.sig ${{ needs.define-package-params.outputs.package_win_name }}
            # Sign Linux packages
            gpg --detach-sign ${{ needs.define-package-params.outputs.package_linux_name }}
            gpg --verify ${{ needs.define-package-params.outputs.package_linux_name }}.sig ${{ needs.define-package-params.outputs.package_linux_name }}
            gpg --detach-sign ${{ needs.define-package-params.outputs.package_linux_name_oneapi }}
            gpg --verify ${{ needs.define-package-params.outputs.package_linux_name_oneapi }}.sig ${{ needs.define-package-params.outputs.package_linux_name_oneapi }}
            # Sign macOS packages
            gpg --detach-sign ${{ needs.define-package-params.outputs.package_macos_name_uni }}
            gpg --verify ${{ needs.define-package-params.outputs.package_macos_name_uni }}.sig ${{ needs.define-package-params.outputs.package_macos_name_uni }}
            gpg --detach-sign ${{ needs.define-package-params.outputs.package_macos_name_x86_64 }}
            gpg --verify ${{ needs.define-package-params.outputs.package_macos_name_x86_64 }}.sig ${{ needs.define-package-params.outputs.package_macos_name_x86_64 }}
            gpg --detach-sign ${{ needs.define-package-params.outputs.package_macos_name_arm64 }}
            gpg --verify ${{ needs.define-package-params.outputs.package_macos_name_arm64 }}.sig ${{ needs.define-package-params.outputs.package_macos_name_arm64 }}
            # Sign example packages
            gpg --detach-sign ${{ needs.define-package-params.outputs.package_examples_linux_name }}
            gpg --verify ${{ needs.define-package-params.outputs.package_examples_linux_name }}.sig ${{ needs.define-package-params.outputs.package_examples_linux_name }}
            gpg --detach-sign ${{ needs.define-package-params.outputs.package_examples_win_name }}
            gpg --verify ${{ needs.define-package-params.outputs.package_examples_win_name }}.sig ${{ needs.define-package-params.outputs.package_examples_win_name }}

        - name: Upload Windows package signature
          uses: actions/upload-artifact@v4
          with:
            name: win-ispc-release-sig
            path: ${{ needs.define-package-params.outputs.package_win_name }}.sig

        - name: Upload Linux package signature
          uses: actions/upload-artifact@v4
          with:
            name: ispc_linux_package_sig
            path: ${{ needs.define-package-params.outputs.package_linux_name }}.sig

        - name: Upload Linux OneAPI package signature
          uses: actions/upload-artifact@v4
          with:
            name: ispc_linux_package_oneapi_sig
            path: ${{ needs.define-package-params.outputs.package_linux_name_oneapi }}.sig

        - name: Upload macOS uni package signature
          uses: actions/upload-artifact@v4
          with:
            name: ispc_macos_package_uni_sig
            path: ${{ needs.define-package-params.outputs.package_macos_name_uni }}.sig

        - name: Upload macOS x86-64 package signature
          uses: actions/upload-artifact@v4
          with:
            name: ispc_macos_package_x86_64_sig
            path: ${{ needs.define-package-params.outputs.package_macos_name_x86_64 }}.sig

        - name: Upload macOS arm64 package signature
          uses: actions/upload-artifact@v4
          with:
            name: ispc_macos_package_arm64_sig
            path: ${{ needs.define-package-params.outputs.package_macos_name_arm64 }}.sig

        - name: Upload examples tar.gz archive signature
          uses: actions/upload-artifact@v4
          with:
            name: examples-tgz-sig
            path: ${{ needs.define-package-params.outputs.package_examples_linux_name }}.sig

        - name: Upload examples zip archive signature
          uses: actions/upload-artifact@v4
          with:
            name: examples-zip-sig
            path: ${{ needs.define-package-params.outputs.package_examples_win_name }}.sig

        - name: Clean up
          run: |
            rm -rf *.zip *.gz *.sig
          shell: bash

