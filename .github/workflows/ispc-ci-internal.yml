# Copyright (c) 2023-2025, Intel Corporation
# SPDX-License-Identifier: BSD-3-Clause

name: (INTERNAL) ISPC testing

on:
  pull_request:
    inputs:
      lto:
        description: Enable LTO
        type: boolean
        default: false
      flow_type:
          description: 'Workflow flow type (full or smoke)'
          required: true
          default: 'smoke'
          type: choice
          options:
          - 'full'
          - 'smoke'
  workflow_dispatch:
    inputs:
      lto:
        description: Enable LTO
        type: boolean
        default: false
      flow_type:
        description: 'Workflow flow type (full or smoke)'
        required: true
        default: 'smoke'
        type: choice
        options:
        - 'full'
        - 'smoke'

env:
  LTO_SUFFIX: ${{ inputs.lto && 'lto-' || '' }}

jobs:
  define-pipeline-params:
    if: ${{ !startsWith(github.head_ref, 'robotex') }}
    runs-on: 'Linux'
    container: amr-registry.caas.intel.com/ispc/ubuntu:22.04
    outputs:
      deps_pipeline_id_os: ${{ steps.define-id.outputs.deps_pipeline_id_os }}
      llvm_ver_os: ${{ steps.define-id.outputs.llvm_ver_os }}
      # Value in lto_flag should be same as default for inputs.lto is default
      lto_flag: ${{ github.event_name != 'push' && inputs.lto || false }}
    steps:
      - name: Checkout core ISPC repo
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - id: define-id
        env:
          ARTIFACTORY_ISPC_URL: ${{ secrets.ARTIFACTORY_ISPC_URL }}/superbuild
          ARTIFACTORY_ISPC_API_KEY: ${{ secrets.ARTIFACTORY_ISPC_API_KEY }}
        shell: bash
        run: |
            echo "LTO_SUFFIX: ${LTO_SUFFIX}" >> $GITHUB_STEP_SUMMARY
            LATEST_OS=latest.${LTO_SUFFIX}os
            curl --connect-timeout 5 --max-time 3600 --retry 5 --retry-delay 0 --retry-max-time 40 --fail -H "X-JFrog-Art-Api:$ARTIFACTORY_ISPC_API_KEY" "$ARTIFACTORY_ISPC_URL/ispc-deps/$LATEST_OS" --output $LATEST_OS
            latest_deps_id_os=$(<$LATEST_OS)
            echo "Latest pipeline ID for os testing: $latest_deps_id_os" >> $GITHUB_STEP_SUMMARY
            echo "deps_pipeline_id_os=$latest_deps_id_os" >> $GITHUB_OUTPUT

            llvm_ver_os=$(jq -r ".configurePresets[0].cacheVariables.LLVM_VERSION" ./superbuild/osPresets.json)
            echo "llvm_ver_os=$llvm_ver_os" >> $GITHUB_OUTPUT
            echo "llvm_ver_os=$llvm_ver_os" >> $GITHUB_STEP_SUMMARY

  # Linux os build
  linux-core-build-os:
    needs: [define-pipeline-params]
    uses: intel-innersource/applications.compilers.ispc.infrastructure/.github/workflows/build-linux-job.yml@main
    with:
      core_ref: ${{ github.ref }}
      deps_pipeline_id: ${{ needs.define-pipeline-params.outputs.deps_pipeline_id_os }}
      test_type: 'os'
      llvm_ver: ${{ needs.define-pipeline-params.outputs.llvm_ver_os }}
      lto: ${{ fromJson(needs.define-pipeline-params.outputs.lto_flag) }}
    secrets: inherit

  # Linux os testing
  linux-core-test-os:
    needs: [define-pipeline-params, linux-core-build-os]
    uses: intel-innersource/applications.compilers.ispc.infrastructure/.github/workflows/test-linux-job.yml@main
    with:
      core_ref: ${{ github.ref }}
      ispc_container: ${{ needs.linux-core-build-os.outputs.ispc_container }}
      ispc_dpcpp_container: ${{ needs.linux-core-build-os.outputs.ispc_dpcpp_container }}
      ispc_pipeline_id: ${{ needs.linux-core-build-os.outputs.ispc_pipeline_id }}
      test_type: 'os'
    secrets: inherit

  # Linux os workloads build and testing
  linux-workloads-os:
    needs: [define-pipeline-params, linux-core-build-os]
    uses: intel-innersource/applications.compilers.ispc.infrastructure/.github/workflows/workloads-build-and-test-linux-job.yml@main
    with:
      deps_pipeline_id: ${{ needs.define-pipeline-params.outputs.deps_pipeline_id_os }}
      ispc_container: ${{ needs.linux-core-build-os.outputs.ispc_container }}
      ispc_pipeline_id: ${{ needs.linux-core-build-os.outputs.ispc_pipeline_id }}
      test_type: 'os'
      llvm_ver: ${{ needs.define-pipeline-params.outputs.llvm_ver_os }}
      lto: ${{ fromJson(needs.define-pipeline-params.outputs.lto_flag) }}
    secrets: inherit

  # Windows os build
  win-core-build-os:
    needs: [define-pipeline-params]
    uses: intel-innersource/applications.compilers.ispc.infrastructure/.github/workflows/build-win-job.yml@main
    with:
      core_ref: ${{ github.ref }}
      deps_pipeline_id: ${{ needs.define-pipeline-params.outputs.deps_pipeline_id_os }}
      test_type: 'os'
      llvm_ver: ${{ needs.define-pipeline-params.outputs.llvm_ver_os }}
      lto: ${{ fromJson(needs.define-pipeline-params.outputs.lto_flag) }}
    secrets: inherit

  # Windows os test
  win-core-test-os:
    needs: [define-pipeline-params, win-core-build-os]
    uses: intel-innersource/applications.compilers.ispc.infrastructure/.github/workflows/test-win-job.yml@main
    with:
      core_ref: ${{ github.ref }}
      deps_pipeline_id: ${{ needs.define-pipeline-params.outputs.deps_pipeline_id_os }}
      test_type: 'os'
    secrets: inherit

  # Windows os workloads build and testing
  win-workloads-os:
    needs: [define-pipeline-params, win-core-build-os]
    uses: intel-innersource/applications.compilers.ispc.infrastructure/.github/workflows/workloads-build-and-test-win-job.yml@main
    with:
      deps_pipeline_id: ${{ needs.define-pipeline-params.outputs.deps_pipeline_id_os }}
      test_type: 'os'
      llvm_ver: ${{ needs.define-pipeline-params.outputs.llvm_ver_os }}
      lto: ${{ fromJson(needs.define-pipeline-params.outputs.lto_flag) }}
    secrets: inherit

