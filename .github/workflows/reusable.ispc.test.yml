# Copyright 2025, Intel Corporation
# SPDX-License-Identifier: BSD-3-Clause

name: Reusable ISPC test workflow

on:
  workflow_call:
    inputs:
      platform:
        description: 'Platform to test on (linux, macos, windows)'
        required: true
        type: string
      architecture:
        description: 'Architecture to test (x86, x86-64, aarch64)'
        required: true
        type: string
      llvm_version:
        description: 'LLVM version to use'
        required: true
        type: string
      artifact_name:
        description: 'Name of the artifact to test'
        required: true
        type: string
      targets:
        description: 'JSON array of targets to test'
        required: false
        type: string
        default: '["avx2-i32x8"]'
      optsets:
        description: 'Optimization sets to test'
        required: false
        type: string
        default: '-O2'
      enable_lto:
        description: 'Was the build using LTO'
        required: false
        type: boolean
        default: false
      enable_xe:
        description: 'Was the build with XE support'
        required: false
        type: boolean
        default: false
      enable_debug:
        description: 'Enable debug mode for tests'
        required: false
        type: boolean
        default: false
      calling_conv:
        description: 'Optional calling convention to test'
        required: false
        type: string
        default: ''

env:
  SDE_MIRROR_ID: 831748
  SDE_TAR_NAME: sde-external-9.44.0-2024-08-22
  USER_AGENT: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36"
  LLVM_HOME: ${{ inputs.platform == 'windows' && 'C:\\projects\\llvm' || github.workspace }}
  ISPC_HOME: ${{ github.workspace }}
  INSTALL_COMPUTE_RUNTIME: ${{ inputs.enable_xe && '1' || '0' }}
  COMPUTE_RUNTIME_GITHUB_RELEASE: ${{ inputs.enable_xe && '1' || '0' }}

jobs:
  test:
    name: Test ISPC on ${{ inputs.platform }} (${{ inputs.architecture }})
    runs-on: ${{ inputs.platform == 'macos' && (inputs.architecture == 'aarch64' && 'macos-14' || 'macos-13') || (inputs.platform == 'windows' && 'windows-2022') || (inputs.architecture == 'aarch64' && 'ubuntu-22.04-arm') || 'ubuntu-22.04' }}
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(inputs.targets) }}

    steps:
    - uses: actions/checkout@v4.2.1

    - name: Download package
      uses: actions/download-artifact@v4.1.8
      with:
        name: ${{ inputs.artifact_name }}

    - name: Install dependencies and unpack artifacts for Linux
      if: inputs.platform == 'linux'
      shell: bash
      run: |
        bash .github/workflows/scripts/install-test-deps.sh

    - name: Install dependencies and unpack artifacts for macOS
      if: inputs.platform == 'macos'
      shell: bash
      run: |
        if [[ "${{ inputs.enable_lto }}" == "true" ]]; then
          tar xf ispc-trunk-macOS.universal.tar.gz
          echo "$GITHUB_WORKSPACE/ispc-trunk-macOS.universal/bin" >> "$GITHUB_PATH"
        else
          tar xf ispc-trunk-macos.tar.gz
          echo "$GITHUB_WORKSPACE/ispc-trunk-macos/bin" >> "$GITHUB_PATH"
        fi
        echo "ISPC_HOME=$GITHUB_WORKSPACE" >> "$GITHUB_ENV"
        echo "LLVM_HOME=$GITHUB_WORKSPACE" >> "$GITHUB_ENV"

    - name: Install dependencies and unpack artifacts for Windows
      if: inputs.platform == 'windows'
      shell: pwsh
      run: |
        .github/workflows/scripts/install-test-deps.ps1

    - name: Check environment
      run: |
        if [ "${{ inputs.platform }}" == "linux" ]; then
          cat /proc/cpuinfo
        elif [ "${{ inputs.platform }}" == "macos" ]; then
          sysctl -n machdep.cpu.brand_string
        else
          wmic cpu get caption, deviceid, name, numberofcores, maxclockspeed, status
        fi
      shell: bash

    - name: Running tests on Linux (full)
      if: (inputs.platform == 'linux' || inputs.platform == 'macos') && inputs.architecture != 'aarch64' && !inputs.enable_debug && !(inputs.architecture == 'x86' && (contains(matrix.target, 'avx2vnni') || contains(matrix.target, 'avx512')))
      shell: bash
      run: |
        echo "PATH=${PATH}"
        ./scripts/alloy.py -r --only="stability ${{ inputs.architecture }} current ${{ inputs.optsets }}" --only-targets="${{ matrix.target }}" --time --update-errors=FP

    - name: Running tests on Linux/macOS (aarch64)
      if: (inputs.platform == 'linux' || inputs.platform == 'macos') && inputs.architecture == 'aarch64'
      shell: bash
      run: |
        echo "PATH=${PATH}"
        ./scripts/run_tests.py -t "${{ matrix.target }}" -a "${{ inputs.architecture }}" -o "${{ inputs.optsets }}" --time --update-errors=FP

    - name: Running tests on Linux/macOS (debug mode)
      if: (inputs.platform == 'linux' || inputs.platform == 'macos') && inputs.architecture != 'aarch64' && inputs.enable_debug && !(inputs.architecture == 'x86' && (contains(matrix.target, 'avx2vnni') || contains(matrix.target, 'avx512')))
      shell: bash
      run: |
        echo "PATH=${PATH}"
        ./scripts/alloy.py -r --only="stability ${{ inputs.architecture }} current debug ${{ inputs.optsets }}" --only-targets="${{ matrix.target }}" --time --update-errors=FP

    - name: Running tests on Windows (full)
      if: inputs.platform == 'windows' && inputs.calling_conv == '' && !(inputs.architecture == 'x86' && (contains(matrix.target, 'avx2vnni') || contains(matrix.target, 'avx512')))
      run: |
        $env:ISPC_HOME = "$pwd"
        .github/workflows/scripts/load-vs-env.ps1 "${{ inputs.architecture }}"
        python .\scripts\alloy.py -r --only="stability ${{ inputs.architecture }} current ${{ inputs.optsets }}" --only-targets="${{ matrix.target }}" --time --update-errors=FP
    
    - name: Running tests on Windows (vectorcall)
      if: inputs.platform == 'windows' && inputs.calling_conv != ''
      run: |
        $env:ISPC_HOME = "$pwd"
        .github/workflows/scripts/load-vs-env.ps1 "${{ inputs.architecture }}"
        python .\scripts\run_tests.py --calling_conv=${{ inputs.calling_conv }} --target=${{ matrix.target }} --arch=${{ inputs.architecture }}
      shell: pwsh
      working-directory: ${{ github.workspace }}

    - name: Set artifact name prefix
      id: set-artifact-name
      shell: bash
      run: |
        if [[ "${{ inputs.calling_conv }}" != "" ]]; then
          echo "name_prefix=llvm${{ inputs.llvm_version }}_veccall.${{ inputs.architecture }}.${{ matrix.target }}" >> "$GITHUB_OUTPUT"
        elif [[ "${{ inputs.enable_debug }}" == "true" ]]; then
          echo "name_prefix=llvm${{ inputs.llvm_version }}.debug.${{ inputs.architecture }}.${{ matrix.target }}" >> "$GITHUB_OUTPUT"
        elif [[ "${{ inputs.enable_lto }}" == "true" ]]; then
          echo "name_prefix=llvm${{ inputs.llvm_version }}_lto.${{ inputs.architecture }}.${{ matrix.target }}" >> "$GITHUB_OUTPUT"
        elif [[ "${{ inputs.enable_xe }}" == "true" ]]; then
          echo "name_prefix=xe.llvm${{ inputs.llvm_version }}.${{ inputs.architecture }}.${{ matrix.target }}" >> "$GITHUB_OUTPUT"
        elif [[ "${{ inputs.architecture }}" == "aarch64" ]]; then
          echo "name_prefix=llvm${{ inputs.llvm_version }}.${{ inputs.platform }}.${{ inputs.optsets }}.${{ inputs.architecture }}.${{ matrix.target }}" >> "$GITHUB_OUTPUT"
        else
          echo "name_prefix=llvm${{ inputs.llvm_version }}.${{ inputs.architecture }}.${{ matrix.target }}" >> "$GITHUB_OUTPUT"
        fi

    - name: Upload fail_db.txt
      uses: actions/upload-artifact@v4.6.0
      if: failure()
      with:
        name: fail_db.${{ steps.set-artifact-name.outputs.name_prefix }}.txt
        path: tests/fail_db.txt

    - name: Upload alloy logs
      uses: actions/upload-artifact@v4.6.0
      if: failure() && inputs.architecture != 'aarch64'
      with:
        name: alloy_results.${{ steps.set-artifact-name.outputs.name_prefix }}
        path: alloy_results_*